/*
 * generated by Xtext 2.25.0
 */
grammar InternalFactoryLogicLang;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package xtext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package xtext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import xtext.services.FactoryLogicLangGrammarAccess;

}
@parser::members {
	private FactoryLogicLangGrammarAccess grammarAccess;

	public void setGrammarAccess(FactoryLogicLangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getModelAccess().getDeclarationsAssignment()); }
			(rule__Model__DeclarationsAssignment)
			{ after(grammarAccess.getModelAccess().getDeclarationsAssignment()); }
		)
		(
			{ before(grammarAccess.getModelAccess().getDeclarationsAssignment()); }
			(rule__Model__DeclarationsAssignment)*
			{ after(grammarAccess.getModelAccess().getDeclarationsAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDeclaration
entryRuleDeclaration
:
{ before(grammarAccess.getDeclarationRule()); }
	 ruleDeclaration
{ after(grammarAccess.getDeclarationRule()); } 
	 EOF 
;

// Rule Declaration
ruleDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeclarationAccess().getAlternatives()); }
		(rule__Declaration__Alternatives)
		{ after(grammarAccess.getDeclarationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConditional
entryRuleConditional
:
{ before(grammarAccess.getConditionalRule()); }
	 ruleConditional
{ after(grammarAccess.getConditionalRule()); } 
	 EOF 
;

// Rule Conditional
ruleConditional 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionalAccess().getGroup()); }
		(rule__Conditional__Group__0)
		{ after(grammarAccess.getConditionalAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLoop
entryRuleLoop
:
{ before(grammarAccess.getLoopRule()); }
	 ruleLoop
{ after(grammarAccess.getLoopRule()); } 
	 EOF 
;

// Rule Loop
ruleLoop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLoopAccess().getGroup()); }
		(rule__Loop__Group__0)
		{ after(grammarAccess.getLoopAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule BOOLEAN_OPERATOR
ruleBOOLEAN_OPERATOR
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBOOLEAN_OPERATORAccess().getAlternatives()); }
		(rule__BOOLEAN_OPERATOR__Alternatives)
		{ after(grammarAccess.getBOOLEAN_OPERATORAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeclarationAccess().getConditionalParserRuleCall_0()); }
		ruleConditional
		{ after(grammarAccess.getDeclarationAccess().getConditionalParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getDeclarationAccess().getLoopParserRuleCall_1()); }
		ruleLoop
		{ after(grammarAccess.getDeclarationAccess().getLoopParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BOOLEAN_OPERATOR__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBOOLEAN_OPERATORAccess().getNOTEnumLiteralDeclaration_0()); }
		('not')
		{ after(grammarAccess.getBOOLEAN_OPERATORAccess().getNOTEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getBOOLEAN_OPERATORAccess().getLESSEnumLiteralDeclaration_1()); }
		('less than')
		{ after(grammarAccess.getBOOLEAN_OPERATORAccess().getLESSEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getBOOLEAN_OPERATORAccess().getGREATEREnumLiteralDeclaration_2()); }
		('greater than')
		{ after(grammarAccess.getBOOLEAN_OPERATORAccess().getGREATEREnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group__0__Impl
	rule__Conditional__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getIfKeyword_0()); }
	'if'
	{ after(grammarAccess.getConditionalAccess().getIfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group__1__Impl
	rule__Conditional__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getVariableAssignment_1()); }
	(rule__Conditional__VariableAssignment_1)
	{ after(grammarAccess.getConditionalAccess().getVariableAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group__2__Impl
	rule__Conditional__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getIsKeyword_2()); }
	'is'
	{ after(grammarAccess.getConditionalAccess().getIsKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group__3__Impl
	rule__Conditional__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getOperatorAssignment_3()); }
	(rule__Conditional__OperatorAssignment_3)?
	{ after(grammarAccess.getConditionalAccess().getOperatorAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group__4__Impl
	rule__Conditional__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getComparisonAssignment_4()); }
	(rule__Conditional__ComparisonAssignment_4)
	{ after(grammarAccess.getConditionalAccess().getComparisonAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getThenKeyword_5()); }
	'then'
	{ after(grammarAccess.getConditionalAccess().getThenKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Loop__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__0__Impl
	rule__Loop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getForEachKeyword_0()); }
	'for each'
	{ after(grammarAccess.getLoopAccess().getForEachKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__1__Impl
	rule__Loop__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getLoopvarAssignment_1()); }
	(rule__Loop__LoopvarAssignment_1)
	{ after(grammarAccess.getLoopAccess().getLoopvarAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__2__Impl
	rule__Loop__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getInKeyword_2()); }
	'in'
	{ after(grammarAccess.getLoopAccess().getInKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__3__Impl
	rule__Loop__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getVariableAssignment_3()); }
	(rule__Loop__VariableAssignment_3)
	{ after(grammarAccess.getLoopAccess().getVariableAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__4__Impl
	rule__Loop__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getGroup_4()); }
	(rule__Loop__Group_4__0)?
	{ after(grammarAccess.getLoopAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__5__Impl
	rule__Loop__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getThatIsKeyword_5()); }
	'that is'
	{ after(grammarAccess.getLoopAccess().getThatIsKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__6__Impl
	rule__Loop__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getOperatorAssignment_6()); }
	(rule__Loop__OperatorAssignment_6)?
	{ after(grammarAccess.getLoopAccess().getOperatorAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__7__Impl
	rule__Loop__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getComparisonAssignment_7()); }
	(rule__Loop__ComparisonAssignment_7)
	{ after(grammarAccess.getLoopAccess().getComparisonAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__8__Impl
	rule__Loop__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getGroup_8()); }
	(rule__Loop__Group_8__0)?
	{ after(grammarAccess.getLoopAccess().getGroup_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getThenKeyword_9()); }
	'then'
	{ after(grammarAccess.getLoopAccess().getThenKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Loop__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group_4__0__Impl
	rule__Loop__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getOfKeyword_4_0()); }
	'of'
	{ after(grammarAccess.getLoopAccess().getOfKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getSTRING1Assignment_4_1()); }
	(rule__Loop__STRING1Assignment_4_1)
	{ after(grammarAccess.getLoopAccess().getSTRING1Assignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Loop__Group_8__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group_8__0__Impl
	rule__Loop__Group_8__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group_8__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getOfKeyword_8_0()); }
	'of'
	{ after(grammarAccess.getLoopAccess().getOfKeyword_8_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group_8__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group_8__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group_8__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getSTRING2Assignment_8_1()); }
	(rule__Loop__STRING2Assignment_8_1)
	{ after(grammarAccess.getLoopAccess().getSTRING2Assignment_8_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__DeclarationsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getDeclarationsDeclarationParserRuleCall_0()); }
		ruleDeclaration
		{ after(grammarAccess.getModelAccess().getDeclarationsDeclarationParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__VariableAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalAccess().getVariableVARIABLETerminalRuleCall_1_0()); }
		RULE_VARIABLE
		{ after(grammarAccess.getConditionalAccess().getVariableVARIABLETerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__OperatorAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalAccess().getOperatorBOOLEAN_OPERATOREnumRuleCall_3_0()); }
		ruleBOOLEAN_OPERATOR
		{ after(grammarAccess.getConditionalAccess().getOperatorBOOLEAN_OPERATOREnumRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__ComparisonAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalAccess().getComparisonVARIABLETerminalRuleCall_4_0()); }
		RULE_VARIABLE
		{ after(grammarAccess.getConditionalAccess().getComparisonVARIABLETerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__LoopvarAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoopAccess().getLoopvarVARIABLETerminalRuleCall_1_0()); }
		RULE_VARIABLE
		{ after(grammarAccess.getLoopAccess().getLoopvarVARIABLETerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__VariableAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoopAccess().getVariableVARIABLETerminalRuleCall_3_0()); }
		RULE_VARIABLE
		{ after(grammarAccess.getLoopAccess().getVariableVARIABLETerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__STRING1Assignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoopAccess().getSTRING1STRINGTerminalRuleCall_4_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getLoopAccess().getSTRING1STRINGTerminalRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__OperatorAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoopAccess().getOperatorBOOLEAN_OPERATOREnumRuleCall_6_0()); }
		ruleBOOLEAN_OPERATOR
		{ after(grammarAccess.getLoopAccess().getOperatorBOOLEAN_OPERATOREnumRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__ComparisonAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoopAccess().getComparisonVARIABLETerminalRuleCall_7_0()); }
		RULE_VARIABLE
		{ after(grammarAccess.getLoopAccess().getComparisonVARIABLETerminalRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__STRING2Assignment_8_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoopAccess().getSTRING2STRINGTerminalRuleCall_8_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getLoopAccess().getSTRING2STRINGTerminalRuleCall_8_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_VARIABLE : ('a'..'z'|'A'..'Z')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
