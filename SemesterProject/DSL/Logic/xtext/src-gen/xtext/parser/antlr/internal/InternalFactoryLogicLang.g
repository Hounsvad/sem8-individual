/*
 * generated by Xtext 2.25.0
 */
grammar InternalFactoryLogicLang;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import xtext.services.FactoryLogicLangGrammarAccess;

}

@parser::members {

 	private FactoryLogicLangGrammarAccess grammarAccess;

    public InternalFactoryLogicLangParser(TokenStream input, FactoryLogicLangGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected FactoryLogicLangGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getDeclarationsDeclarationParserRuleCall_0());
			}
			lv_declarations_0_0=ruleDeclaration
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"declarations",
					lv_declarations_0_0,
					"xtext.FactoryLogicLang.Declaration");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleDeclaration
entryRuleDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclarationRule()); }
	iv_ruleDeclaration=ruleDeclaration
	{ $current=$iv_ruleDeclaration.current; }
	EOF;

// Rule Declaration
ruleDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDeclarationAccess().getConditionalParserRuleCall_0());
		}
		this_Conditional_0=ruleConditional
		{
			$current = $this_Conditional_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDeclarationAccess().getLoopParserRuleCall_1());
		}
		this_Loop_1=ruleLoop
		{
			$current = $this_Loop_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleConditional
entryRuleConditional returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionalRule()); }
	iv_ruleConditional=ruleConditional
	{ $current=$iv_ruleConditional.current; }
	EOF;

// Rule Conditional
ruleConditional returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getConditionalAccess().getIfKeyword_0());
		}
		(
			(
				lv_variable_1_0=RULE_VARIABLE
				{
					newLeafNode(lv_variable_1_0, grammarAccess.getConditionalAccess().getVariableVARIABLETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConditionalRule());
					}
					setWithLastConsumed(
						$current,
						"variable",
						lv_variable_1_0,
						"xtext.FactoryLogicLang.VARIABLE");
				}
			)
		)
		otherlv_2='is'
		{
			newLeafNode(otherlv_2, grammarAccess.getConditionalAccess().getIsKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalAccess().getOperatorBOOLEAN_OPERATOREnumRuleCall_3_0());
				}
				lv_operator_3_0=ruleBOOLEAN_OPERATOR
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalRule());
					}
					set(
						$current,
						"operator",
						lv_operator_3_0,
						"xtext.FactoryLogicLang.BOOLEAN_OPERATOR");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				lv_comparison_4_0=RULE_VARIABLE
				{
					newLeafNode(lv_comparison_4_0, grammarAccess.getConditionalAccess().getComparisonVARIABLETerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConditionalRule());
					}
					setWithLastConsumed(
						$current,
						"comparison",
						lv_comparison_4_0,
						"xtext.FactoryLogicLang.VARIABLE");
				}
			)
		)
		otherlv_5='then'
		{
			newLeafNode(otherlv_5, grammarAccess.getConditionalAccess().getThenKeyword_5());
		}
	)
;

// Entry rule entryRuleLoop
entryRuleLoop returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLoopRule()); }
	iv_ruleLoop=ruleLoop
	{ $current=$iv_ruleLoop.current; }
	EOF;

// Rule Loop
ruleLoop returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='for each'
		{
			newLeafNode(otherlv_0, grammarAccess.getLoopAccess().getForEachKeyword_0());
		}
		(
			(
				lv_loopvar_1_0=RULE_VARIABLE
				{
					newLeafNode(lv_loopvar_1_0, grammarAccess.getLoopAccess().getLoopvarVARIABLETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLoopRule());
					}
					setWithLastConsumed(
						$current,
						"loopvar",
						lv_loopvar_1_0,
						"xtext.FactoryLogicLang.VARIABLE");
				}
			)
		)
		otherlv_2='in'
		{
			newLeafNode(otherlv_2, grammarAccess.getLoopAccess().getInKeyword_2());
		}
		(
			(
				lv_variable_3_0=RULE_VARIABLE
				{
					newLeafNode(lv_variable_3_0, grammarAccess.getLoopAccess().getVariableVARIABLETerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLoopRule());
					}
					setWithLastConsumed(
						$current,
						"variable",
						lv_variable_3_0,
						"xtext.FactoryLogicLang.VARIABLE");
				}
			)
		)
		(
			otherlv_4='of'
			{
				newLeafNode(otherlv_4, grammarAccess.getLoopAccess().getOfKeyword_4_0());
			}
			(
				(
					lv_STRING1_5_0=RULE_STRING
					{
						newLeafNode(lv_STRING1_5_0, grammarAccess.getLoopAccess().getSTRING1STRINGTerminalRuleCall_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLoopRule());
						}
						setWithLastConsumed(
							$current,
							"STRING1",
							lv_STRING1_5_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)?
		otherlv_6='that is'
		{
			newLeafNode(otherlv_6, grammarAccess.getLoopAccess().getThatIsKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLoopAccess().getOperatorBOOLEAN_OPERATOREnumRuleCall_6_0());
				}
				lv_operator_7_0=ruleBOOLEAN_OPERATOR
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLoopRule());
					}
					set(
						$current,
						"operator",
						lv_operator_7_0,
						"xtext.FactoryLogicLang.BOOLEAN_OPERATOR");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				lv_comparison_8_0=RULE_VARIABLE
				{
					newLeafNode(lv_comparison_8_0, grammarAccess.getLoopAccess().getComparisonVARIABLETerminalRuleCall_7_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLoopRule());
					}
					setWithLastConsumed(
						$current,
						"comparison",
						lv_comparison_8_0,
						"xtext.FactoryLogicLang.VARIABLE");
				}
			)
		)
		(
			otherlv_9='of'
			{
				newLeafNode(otherlv_9, grammarAccess.getLoopAccess().getOfKeyword_8_0());
			}
			(
				(
					lv_STRING2_10_0=RULE_STRING
					{
						newLeafNode(lv_STRING2_10_0, grammarAccess.getLoopAccess().getSTRING2STRINGTerminalRuleCall_8_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLoopRule());
						}
						setWithLastConsumed(
							$current,
							"STRING2",
							lv_STRING2_10_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)?
		otherlv_11='then'
		{
			newLeafNode(otherlv_11, grammarAccess.getLoopAccess().getThenKeyword_9());
		}
	)
;

// Rule BOOLEAN_OPERATOR
ruleBOOLEAN_OPERATOR returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='not'
			{
				$current = grammarAccess.getBOOLEAN_OPERATORAccess().getNOTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getBOOLEAN_OPERATORAccess().getNOTEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='less than'
			{
				$current = grammarAccess.getBOOLEAN_OPERATORAccess().getLESSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getBOOLEAN_OPERATORAccess().getLESSEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='greater than'
			{
				$current = grammarAccess.getBOOLEAN_OPERATORAccess().getGREATEREnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getBOOLEAN_OPERATORAccess().getGREATEREnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_VARIABLE : ('a'..'z'|'A'..'Z')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
