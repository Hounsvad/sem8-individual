grammar xtext.factoryLang.FactoryLang with org.eclipse.xtext.common.Terminals

generate factoryLang "http://www.factoryLang.xtext/FactoryLang"

Model:
	configurations+=Configuration+ statements+=Statement*;

// ----- CONFIGURATION ----- //
Configuration:
	'create' device=Device;

Device:
	Crane | Disk | Camera;

// ----- CONFIGURATION:CRANE ----- //
Crane returns Device:
	{Crane} 'crane' 'named' name=STRING BEGIN parameters+=CraneParameter+ END;

CraneParameter returns Parameter:
	CranePositionParameter;

CranePositionParameter returns CraneParameter:
	{CranePositionParameter} 'with' 'position' 'at' degree=INT 'named' name=STRING;

// ----- CONFIGURATION:DISK ----- //
Disk returns Device:
	{Disk} 'disk' 'named' name=STRING BEGIN slotParameter=DiskSlotParameter parameters+=DiskParameter+ END;

DiskParameter returns Parameter:
	DiskZoneParameter;

DiskSlotParameter returns DiskParameter:
	{DiskSlotParameter} 'with' size=INT 'slots';

DiskZoneParameter returns DiskParameter:
	{DiskZoneParameter} 'with' 'zone' zone=INT 'at' 'slot' slot=INT 'named' name=STRING;

// ----- CONFIGURATION:CAMERA ----- //
Camera returns Device:
	{Camera} 'camera' 'named' name=STRING BEGIN parameters+=CameraParameter+ END;

CameraParameter returns Parameter:
	CameraColorParameter;

CameraColorParameter returns CameraParameter:
	{CameraColorParameter} 'with' 'scannable' 'color' color=COLOR;

// ----- STATEMENTS ----- //
Statement:
	Conditional | Operation | Loop;

// ----- STATEMENTS:CONDITIONALS ----- //
Conditional returns Statement:
	CraneConditional | DiskConditional | CameraConditional | VariableConditional;

// ----- STATEMENTS:CONDITIONALS:CRANE ----- //
CraneConditional returns Conditional:
	{CraneConditional} 'if' source=[Crane|STRING] 'is' (operator='not')?
	target=[CraneParameter|STRING]
	'then' BEGIN statements+=Statement+ END;

// ----- STATEMENTS:CONDITIONALS:DISK ----- //
DiskConditional returns Conditional:
	{DiskConditional} 'if' source=[Disk|STRING] 'is' (operator='not')? target=DiskStateValue 'then' BEGIN
	statements+=Statement+ END;

// ----- STATEMENTS:CONDITIONALS:CAMERA ----- //
CameraConditional returns Conditional:
	{CameraConditional} 'if' source=[Camera|STRING] 'is' (operator='not')? target=COLOR 'then' BEGIN
	statements+=Statement+ END;

// ----- STATEMENTS:CONDITIONALS:VARIABLE ----- //
VariableConditional returns Conditional:
	{VariableConditional} 'if' source=[Variable] 'is' (operator='not')? (comparison_operator=COMPARISON_OPERATOR)?
	target=VariableValue 'then' BEGIN
	statements+=Statement+ END;

// ----- STATEMENTS:OPERATIONS ----- //
Operation returns Statement:
	CraneOperation | DiskOperation | CameraOperation;

// ----- STATEMENTS:OPERATIONS:CRANE ----- //
CraneOperation returns Operation:
	CranePickupOperation | CraneDropOperation;

CranePickupOperation returns CraneOperation:
	{CranePickupOperation} device=[Crane|STRING] 'pickup' 'item' 'at' target=[CraneParameter|STRING];

CraneDropOperation returns CraneOperation:
	{CraneDropOperation} device=[Crane|STRING] 'drop' 'item' 'at' target=[CraneParameter|STRING];

// ----- STATEMENTS:OPERATIONS:DISK ----- //
DiskOperation returns Operation:
	DiskMoveEmptySlotOperation | DiskMoveVariableSlotOperation | DiskMoveSlotOperation | DiskMarkSlotOperation;

DiskMoveSlotOperation returns DiskOperation:
	{DiskMoveSlotOperation} device=[Disk|STRING] 'move' 'slot' 'at' source=[DiskZoneParameter|STRING] 'to'
	target=[DiskZoneParameter|STRING];

DiskMoveVariableSlotOperation returns DiskOperation:
	{DiskMoveVariableSlotOperation} device=[Disk|STRING] 'move' 'slot' 'of' variable=[Variable] 'to' target=[DiskZoneParameter|STRING];

DiskMoveEmptySlotOperation returns DiskOperation:
	{DiskMoveEmptySlotOperation} device=[Disk|STRING] 'move' 'empty' 'slot' 'to' target=[DiskZoneParameter|STRING];

DiskMarkSlotOperation returns DiskOperation:
	{DiskMarkSlotOperation} device=[Disk|STRING] 'mark' 'slot' 'at' target=[DiskZoneParameter|STRING] 'as'
	value=DiskSlotValue ('in' quantity=INT measure=TIME)?;

// ----- STATEMENTS:OPERATIONS:CAMERA ----- //
CameraOperation returns Operation:
	CameraScanOperation;

CameraScanOperation returns CameraOperation:
	{CameraScanOperation} device=[Camera|STRING] 'scan' 'color' 'into' variable=GlobalVariable;

// ----- STATEMENTS:LOOPS ----- //
Loop returns Statement:
	ForEach;

// ----- STATEMENTS:LOOPS:FOREACH ----- //
ForEach returns Loop:
	{ForEach} 'for' 'each' variable=LocalVariable 'in' source=[Device|STRING] 'that' 'is' (operator='not')? target=VariableValue
	'then' BEGIN statements+=Statement+ END;

// ----- VARIABLES ----- //
LocalVariable returns Variable:
	{LocalVariable} name=ID;

GlobalVariable returns Variable:
	{GlobalVariable} name=ID;

// ----- VALUE TYPES ----- //
DiskSlotValue:
	DiskSlotStateValue | ColorValue | ref=[GlobalVariable];

VariableValue:
	DiskSlotStateValue | ColorValue | Number | DiskStateValue;

// ----- VALUE TYPES:ACTUAL VALUES ----- //
DiskStateValue:
	value=DISK_STATES;

DiskSlotStateValue:
	value=DISK_SLOT_STATES;

ColorValue:
	value=COLOR;

Number:
	value=INT;

// ----- SHARED ENUMS ----- //
enum COMPARISON_OPERATOR:
	LESS_THAN='less than' | GREATER_THAN='greater than';

enum COLOR:
	RED='red' | GREEN='green' | BLUE='blue';

enum DISK_SLOT_STATES:
	FREE='free' | IN_PROGRESS='in-progress' | COMPLETE='complete';

enum DISK_STATES:
	FULL='full' | EMPTY='empty';

enum TIME:
	SECONDS='seconds' | SECOND='second' | MINUTES='minutes' | MINUTE='minute' | HOURS='hours' | HOUR='hour';

// ----- TERMINALS ----- //
terminal BEGIN:
	'synthetic:BEGIN';

terminal END:
	'synthetic:END';
