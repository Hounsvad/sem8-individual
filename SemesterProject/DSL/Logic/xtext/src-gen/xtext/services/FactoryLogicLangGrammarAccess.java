/*
 * generated by Xtext 2.25.0
 */
package xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class FactoryLogicLangGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.FactoryLogicLang.Model");
		private final Assignment cDeclarationsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_0 = (RuleCall)cDeclarationsAssignment.eContents().get(0);
		
		//Model:
		//    declarations+=Declaration+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//declarations+=Declaration+
		public Assignment getDeclarationsAssignment() { return cDeclarationsAssignment; }
		
		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_0() { return cDeclarationsDeclarationParserRuleCall_0; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.FactoryLogicLang.Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConditionalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLoopParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Declaration:
		//    Conditional | Loop // | Operation
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Conditional | Loop
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Conditional
		public RuleCall getConditionalParserRuleCall_0() { return cConditionalParserRuleCall_0; }
		
		//Loop
		public RuleCall getLoopParserRuleCall_1() { return cLoopParserRuleCall_1; }
	}
	public class ConditionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.FactoryLogicLang.Conditional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableVARIABLETerminalRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Keyword cIsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperatorBOOLEAN_OPERATOREnumRuleCall_3_0 = (RuleCall)cOperatorAssignment_3.eContents().get(0);
		private final Assignment cComparisonAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cComparisonVARIABLETerminalRuleCall_4_0 = (RuleCall)cComparisonAssignment_4.eContents().get(0);
		private final Keyword cThenKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Conditional:
		//    'if' variable=VARIABLE 'is' (operator=BOOLEAN_OPERATOR)? comparison=VARIABLE 'then'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' variable=VARIABLE 'is' (operator=BOOLEAN_OPERATOR)? comparison=VARIABLE 'then'
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//variable=VARIABLE
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//VARIABLE
		public RuleCall getVariableVARIABLETerminalRuleCall_1_0() { return cVariableVARIABLETerminalRuleCall_1_0; }
		
		//'is'
		public Keyword getIsKeyword_2() { return cIsKeyword_2; }
		
		//(operator=BOOLEAN_OPERATOR)?
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }
		
		//BOOLEAN_OPERATOR
		public RuleCall getOperatorBOOLEAN_OPERATOREnumRuleCall_3_0() { return cOperatorBOOLEAN_OPERATOREnumRuleCall_3_0; }
		
		//comparison=VARIABLE
		public Assignment getComparisonAssignment_4() { return cComparisonAssignment_4; }
		
		//VARIABLE
		public RuleCall getComparisonVARIABLETerminalRuleCall_4_0() { return cComparisonVARIABLETerminalRuleCall_4_0; }
		
		//'then'
		public Keyword getThenKeyword_5() { return cThenKeyword_5; }
	}
	public class LoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.FactoryLogicLang.Loop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForEachKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLoopvarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLoopvarVARIABLETerminalRuleCall_1_0 = (RuleCall)cLoopvarAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariableVARIABLETerminalRuleCall_3_0 = (RuleCall)cVariableAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOfKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSTRING1Assignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSTRING1STRINGTerminalRuleCall_4_1_0 = (RuleCall)cSTRING1Assignment_4_1.eContents().get(0);
		private final Keyword cThatIsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOperatorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOperatorBOOLEAN_OPERATOREnumRuleCall_6_0 = (RuleCall)cOperatorAssignment_6.eContents().get(0);
		private final Assignment cComparisonAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cComparisonVARIABLETerminalRuleCall_7_0 = (RuleCall)cComparisonAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cOfKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cSTRING2Assignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cSTRING2STRINGTerminalRuleCall_8_1_0 = (RuleCall)cSTRING2Assignment_8_1.eContents().get(0);
		private final Keyword cThenKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Loop:
		//    'for each' loopvar=VARIABLE 'in' variable=VARIABLE ('of' STRING1=STRING)?
		//    'that is' (operator=BOOLEAN_OPERATOR)? comparison=VARIABLE ('of' STRING2=STRING)? 'then'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'for each' loopvar=VARIABLE 'in' variable=VARIABLE ('of' STRING1=STRING)?
		//'that is' (operator=BOOLEAN_OPERATOR)? comparison=VARIABLE ('of' STRING2=STRING)? 'then'
		public Group getGroup() { return cGroup; }
		
		//'for each'
		public Keyword getForEachKeyword_0() { return cForEachKeyword_0; }
		
		//loopvar=VARIABLE
		public Assignment getLoopvarAssignment_1() { return cLoopvarAssignment_1; }
		
		//VARIABLE
		public RuleCall getLoopvarVARIABLETerminalRuleCall_1_0() { return cLoopvarVARIABLETerminalRuleCall_1_0; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//variable=VARIABLE
		public Assignment getVariableAssignment_3() { return cVariableAssignment_3; }
		
		//VARIABLE
		public RuleCall getVariableVARIABLETerminalRuleCall_3_0() { return cVariableVARIABLETerminalRuleCall_3_0; }
		
		//('of' STRING1=STRING)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'of'
		public Keyword getOfKeyword_4_0() { return cOfKeyword_4_0; }
		
		//STRING1=STRING
		public Assignment getSTRING1Assignment_4_1() { return cSTRING1Assignment_4_1; }
		
		//STRING
		public RuleCall getSTRING1STRINGTerminalRuleCall_4_1_0() { return cSTRING1STRINGTerminalRuleCall_4_1_0; }
		
		//'that is'
		public Keyword getThatIsKeyword_5() { return cThatIsKeyword_5; }
		
		//(operator=BOOLEAN_OPERATOR)?
		public Assignment getOperatorAssignment_6() { return cOperatorAssignment_6; }
		
		//BOOLEAN_OPERATOR
		public RuleCall getOperatorBOOLEAN_OPERATOREnumRuleCall_6_0() { return cOperatorBOOLEAN_OPERATOREnumRuleCall_6_0; }
		
		//comparison=VARIABLE
		public Assignment getComparisonAssignment_7() { return cComparisonAssignment_7; }
		
		//VARIABLE
		public RuleCall getComparisonVARIABLETerminalRuleCall_7_0() { return cComparisonVARIABLETerminalRuleCall_7_0; }
		
		//('of' STRING2=STRING)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'of'
		public Keyword getOfKeyword_8_0() { return cOfKeyword_8_0; }
		
		//STRING2=STRING
		public Assignment getSTRING2Assignment_8_1() { return cSTRING2Assignment_8_1; }
		
		//STRING
		public RuleCall getSTRING2STRINGTerminalRuleCall_8_1_0() { return cSTRING2STRINGTerminalRuleCall_8_1_0; }
		
		//'then'
		public Keyword getThenKeyword_9() { return cThenKeyword_9; }
	}
	
	public class BOOLEAN_OPERATORElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.FactoryLogicLang.BOOLEAN_OPERATOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNOTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNOTNotKeyword_0_0 = (Keyword)cNOTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLESSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLESSLessThanKeyword_1_0 = (Keyword)cLESSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGREATEREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGREATERGreaterThanKeyword_2_0 = (Keyword)cGREATEREnumLiteralDeclaration_2.eContents().get(0);
		
		//enum BOOLEAN_OPERATOR:
		//    NOT='not'|LESS='less than'|GREATER='greater than'
		//;
		public EnumRule getRule() { return rule; }
		
		//NOT='not'|LESS='less than'|GREATER='greater than'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NOT='not'
		public EnumLiteralDeclaration getNOTEnumLiteralDeclaration_0() { return cNOTEnumLiteralDeclaration_0; }
		
		//'not'
		public Keyword getNOTNotKeyword_0_0() { return cNOTNotKeyword_0_0; }
		
		//LESS='less than'
		public EnumLiteralDeclaration getLESSEnumLiteralDeclaration_1() { return cLESSEnumLiteralDeclaration_1; }
		
		//'less than'
		public Keyword getLESSLessThanKeyword_1_0() { return cLESSLessThanKeyword_1_0; }
		
		//GREATER='greater than'
		public EnumLiteralDeclaration getGREATEREnumLiteralDeclaration_2() { return cGREATEREnumLiteralDeclaration_2; }
		
		//'greater than'
		public Keyword getGREATERGreaterThanKeyword_2_0() { return cGREATERGreaterThanKeyword_2_0; }
	}
	
	private final ModelElements pModel;
	private final DeclarationElements pDeclaration;
	private final ConditionalElements pConditional;
	private final LoopElements pLoop;
	private final BOOLEAN_OPERATORElements eBOOLEAN_OPERATOR;
	private final TerminalRule tVARIABLE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FactoryLogicLangGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pDeclaration = new DeclarationElements();
		this.pConditional = new ConditionalElements();
		this.pLoop = new LoopElements();
		this.eBOOLEAN_OPERATOR = new BOOLEAN_OPERATORElements();
		this.tVARIABLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.FactoryLogicLang.VARIABLE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("xtext.FactoryLogicLang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    declarations+=Declaration+
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Declaration:
	//    Conditional | Loop // | Operation
	//;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//Conditional:
	//    'if' variable=VARIABLE 'is' (operator=BOOLEAN_OPERATOR)? comparison=VARIABLE 'then'
	//;
	public ConditionalElements getConditionalAccess() {
		return pConditional;
	}
	
	public ParserRule getConditionalRule() {
		return getConditionalAccess().getRule();
	}
	
	//Loop:
	//    'for each' loopvar=VARIABLE 'in' variable=VARIABLE ('of' STRING1=STRING)?
	//    'that is' (operator=BOOLEAN_OPERATOR)? comparison=VARIABLE ('of' STRING2=STRING)? 'then'
	//;
	public LoopElements getLoopAccess() {
		return pLoop;
	}
	
	public ParserRule getLoopRule() {
		return getLoopAccess().getRule();
	}
	
	//enum BOOLEAN_OPERATOR:
	//    NOT='not'|LESS='less than'|GREATER='greater than'
	//;
	public BOOLEAN_OPERATORElements getBOOLEAN_OPERATORAccess() {
		return eBOOLEAN_OPERATOR;
	}
	
	public EnumRule getBOOLEAN_OPERATORRule() {
		return getBOOLEAN_OPERATORAccess().getRule();
	}
	
	//terminal VARIABLE:
	//    ('a'..'z'|'A'..'Z')+
	//;
	public TerminalRule getVARIABLERule() {
		return tVARIABLE;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
