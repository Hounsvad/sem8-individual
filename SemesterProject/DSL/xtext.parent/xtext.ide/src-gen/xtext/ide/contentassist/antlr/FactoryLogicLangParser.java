/*
 * generated by Xtext 2.25.0
 */
package xtext.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.antlr.runtime.CharStream;
import org.antlr.runtime.TokenSource;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import xtext.ide.contentassist.antlr.internal.InternalFactoryLogicLangParser;
import xtext.services.FactoryLogicLangGrammarAccess;

public class FactoryLogicLangParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(FactoryLogicLangGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, FactoryLogicLangGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getDeclarationAccess().getAlternatives(), "rule__Declaration__Alternatives");
			builder.put(grammarAccess.getDeviceAccess().getAlternatives(), "rule__Device__Alternatives");
			builder.put(grammarAccess.getStorageParameterAccess().getAlternatives(), "rule__StorageParameter__Alternatives");
			builder.put(grammarAccess.getLogicAccess().getAlternatives(), "rule__Logic__Alternatives");
			builder.put(grammarAccess.getDeviceConditionalAccess().getAlternatives_4(), "rule__DeviceConditional__Alternatives_4");
			builder.put(grammarAccess.getVariableConditionalAccess().getAlternatives_4(), "rule__VariableConditional__Alternatives_4");
			builder.put(grammarAccess.getNumberConditionalAccess().getAlternatives_6(), "rule__NumberConditional__Alternatives_6");
			builder.put(grammarAccess.getLoopAccess().getAlternatives_8(), "rule__Loop__Alternatives_8");
			builder.put(grammarAccess.getOperationAccess().getAlternatives(), "rule__Operation__Alternatives");
			builder.put(grammarAccess.getStorageMarkSlotAccess().getAlternatives_6(), "rule__StorageMarkSlot__Alternatives_6");
			builder.put(grammarAccess.getCOLORAccess().getAlternatives(), "rule__COLOR__Alternatives");
			builder.put(grammarAccess.getCONST_VARIABLESAccess().getAlternatives(), "rule__CONST_VARIABLES__Alternatives");
			builder.put(grammarAccess.getBOOLEAN_OPERATORAccess().getAlternatives(), "rule__BOOLEAN_OPERATOR__Alternatives");
			builder.put(grammarAccess.getTIMEAccess().getAlternatives(), "rule__TIME__Alternatives");
			builder.put(grammarAccess.getCraneAccess().getGroup(), "rule__Crane__Group__0");
			builder.put(grammarAccess.getCraneParameterAccess().getGroup(), "rule__CraneParameter__Group__0");
			builder.put(grammarAccess.getStorageAccess().getGroup(), "rule__Storage__Group__0");
			builder.put(grammarAccess.getStorageSlotParameterAccess().getGroup(), "rule__StorageSlotParameter__Group__0");
			builder.put(grammarAccess.getStoragePositionParameterAccess().getGroup(), "rule__StoragePositionParameter__Group__0");
			builder.put(grammarAccess.getCameraAccess().getGroup(), "rule__Camera__Group__0");
			builder.put(grammarAccess.getCameraParameterAccess().getGroup(), "rule__CameraParameter__Group__0");
			builder.put(grammarAccess.getDeviceConditionalAccess().getGroup(), "rule__DeviceConditional__Group__0");
			builder.put(grammarAccess.getVariableConditionalAccess().getGroup(), "rule__VariableConditional__Group__0");
			builder.put(grammarAccess.getNumberConditionalAccess().getGroup(), "rule__NumberConditional__Group__0");
			builder.put(grammarAccess.getLoopAccess().getGroup(), "rule__Loop__Group__0");
			builder.put(grammarAccess.getLoopAccess().getGroup_4(), "rule__Loop__Group_4__0");
			builder.put(grammarAccess.getStorageMoveEmptySlotAccess().getGroup(), "rule__StorageMoveEmptySlot__Group__0");
			builder.put(grammarAccess.getStorageMoveVariableSlotAccess().getGroup(), "rule__StorageMoveVariableSlot__Group__0");
			builder.put(grammarAccess.getStorageMoveSlotAccess().getGroup(), "rule__StorageMoveSlot__Group__0");
			builder.put(grammarAccess.getStorageMarkSlotAccess().getGroup(), "rule__StorageMarkSlot__Group__0");
			builder.put(grammarAccess.getStorageMarkSlotAccess().getGroup_7(), "rule__StorageMarkSlot__Group_7__0");
			builder.put(grammarAccess.getCameraScanAccess().getGroup(), "rule__CameraScan__Group__0");
			builder.put(grammarAccess.getLoopVariableAccess().getGroup(), "rule__LoopVariable__Group__0");
			builder.put(grammarAccess.getGloablVariableAccess().getGroup(), "rule__GloablVariable__Group__0");
			builder.put(grammarAccess.getCranePickupAccess().getGroup(), "rule__CranePickup__Group__0");
			builder.put(grammarAccess.getCraneDropAccess().getGroup(), "rule__CraneDrop__Group__0");
			builder.put(grammarAccess.getModelAccess().getDeclarationsAssignment(), "rule__Model__DeclarationsAssignment");
			builder.put(grammarAccess.getCraneAccess().getNameAssignment_3(), "rule__Crane__NameAssignment_3");
			builder.put(grammarAccess.getCraneAccess().getParametersAssignment_5(), "rule__Crane__ParametersAssignment_5");
			builder.put(grammarAccess.getCraneParameterAccess().getDegreeAssignment_3(), "rule__CraneParameter__DegreeAssignment_3");
			builder.put(grammarAccess.getCraneParameterAccess().getNameAssignment_5(), "rule__CraneParameter__NameAssignment_5");
			builder.put(grammarAccess.getStorageAccess().getNameAssignment_3(), "rule__Storage__NameAssignment_3");
			builder.put(grammarAccess.getStorageAccess().getParametersAssignment_5(), "rule__Storage__ParametersAssignment_5");
			builder.put(grammarAccess.getStorageSlotParameterAccess().getSlotsAssignment_1(), "rule__StorageSlotParameter__SlotsAssignment_1");
			builder.put(grammarAccess.getStoragePositionParameterAccess().getSlotAssignment_4(), "rule__StoragePositionParameter__SlotAssignment_4");
			builder.put(grammarAccess.getStoragePositionParameterAccess().getNameAssignment_6(), "rule__StoragePositionParameter__NameAssignment_6");
			builder.put(grammarAccess.getCameraAccess().getNameAssignment_3(), "rule__Camera__NameAssignment_3");
			builder.put(grammarAccess.getCameraAccess().getParametersAssignment_5(), "rule__Camera__ParametersAssignment_5");
			builder.put(grammarAccess.getCameraParameterAccess().getColorAssignment_2(), "rule__CameraParameter__ColorAssignment_2");
			builder.put(grammarAccess.getDeviceConditionalAccess().getSourceAssignment_1(), "rule__DeviceConditional__SourceAssignment_1");
			builder.put(grammarAccess.getDeviceConditionalAccess().getOperatorAssignment_3(), "rule__DeviceConditional__OperatorAssignment_3");
			builder.put(grammarAccess.getDeviceConditionalAccess().getComparison_constAssignment_4_0(), "rule__DeviceConditional__Comparison_constAssignment_4_0");
			builder.put(grammarAccess.getDeviceConditionalAccess().getComparison_colorAssignment_4_1(), "rule__DeviceConditional__Comparison_colorAssignment_4_1");
			builder.put(grammarAccess.getDeviceConditionalAccess().getComparison_intAssignment_4_2(), "rule__DeviceConditional__Comparison_intAssignment_4_2");
			builder.put(grammarAccess.getDeviceConditionalAccess().getLogicsAssignment_7(), "rule__DeviceConditional__LogicsAssignment_7");
			builder.put(grammarAccess.getVariableConditionalAccess().getSourceAssignment_1(), "rule__VariableConditional__SourceAssignment_1");
			builder.put(grammarAccess.getVariableConditionalAccess().getOperatorAssignment_3(), "rule__VariableConditional__OperatorAssignment_3");
			builder.put(grammarAccess.getVariableConditionalAccess().getComparison_constAssignment_4_0(), "rule__VariableConditional__Comparison_constAssignment_4_0");
			builder.put(grammarAccess.getVariableConditionalAccess().getComparison_colorAssignment_4_1(), "rule__VariableConditional__Comparison_colorAssignment_4_1");
			builder.put(grammarAccess.getVariableConditionalAccess().getComparison_intAssignment_4_2(), "rule__VariableConditional__Comparison_intAssignment_4_2");
			builder.put(grammarAccess.getVariableConditionalAccess().getLogicsAssignment_7(), "rule__VariableConditional__LogicsAssignment_7");
			builder.put(grammarAccess.getNumberConditionalAccess().getSource_intAssignment_1(), "rule__NumberConditional__Source_intAssignment_1");
			builder.put(grammarAccess.getNumberConditionalAccess().getOperatorAssignment_3(), "rule__NumberConditional__OperatorAssignment_3");
			builder.put(grammarAccess.getNumberConditionalAccess().getComparison_constAssignment_6_0(), "rule__NumberConditional__Comparison_constAssignment_6_0");
			builder.put(grammarAccess.getNumberConditionalAccess().getComparison_colorAssignment_6_1(), "rule__NumberConditional__Comparison_colorAssignment_6_1");
			builder.put(grammarAccess.getNumberConditionalAccess().getComparison_intAssignment_6_2(), "rule__NumberConditional__Comparison_intAssignment_6_2");
			builder.put(grammarAccess.getNumberConditionalAccess().getLogicsAssignment_9(), "rule__NumberConditional__LogicsAssignment_9");
			builder.put(grammarAccess.getLoopAccess().getVariableAssignment_1(), "rule__Loop__VariableAssignment_1");
			builder.put(grammarAccess.getLoopAccess().getListAssignment_3(), "rule__Loop__ListAssignment_3");
			builder.put(grammarAccess.getLoopAccess().getSourceAssignment_4_1(), "rule__Loop__SourceAssignment_4_1");
			builder.put(grammarAccess.getLoopAccess().getOperatorAssignment_7(), "rule__Loop__OperatorAssignment_7");
			builder.put(grammarAccess.getLoopAccess().getComparison_constAssignment_8_0(), "rule__Loop__Comparison_constAssignment_8_0");
			builder.put(grammarAccess.getLoopAccess().getComparison_colorAssignment_8_1(), "rule__Loop__Comparison_colorAssignment_8_1");
			builder.put(grammarAccess.getLoopAccess().getComparison_intAssignment_8_2(), "rule__Loop__Comparison_intAssignment_8_2");
			builder.put(grammarAccess.getLoopAccess().getLogicsAssignment_11(), "rule__Loop__LogicsAssignment_11");
			builder.put(grammarAccess.getStorageMoveEmptySlotAccess().getDeviceAssignment_0(), "rule__StorageMoveEmptySlot__DeviceAssignment_0");
			builder.put(grammarAccess.getStorageMoveEmptySlotAccess().getDestinationAssignment_5(), "rule__StorageMoveEmptySlot__DestinationAssignment_5");
			builder.put(grammarAccess.getStorageMoveVariableSlotAccess().getDeviceAssignment_0(), "rule__StorageMoveVariableSlot__DeviceAssignment_0");
			builder.put(grammarAccess.getStorageMoveVariableSlotAccess().getPositionAssignment_4(), "rule__StorageMoveVariableSlot__PositionAssignment_4");
			builder.put(grammarAccess.getStorageMoveVariableSlotAccess().getDestinationAssignment_6(), "rule__StorageMoveVariableSlot__DestinationAssignment_6");
			builder.put(grammarAccess.getStorageMoveSlotAccess().getDeviceAssignment_0(), "rule__StorageMoveSlot__DeviceAssignment_0");
			builder.put(grammarAccess.getStorageMoveSlotAccess().getPositionAssignment_4(), "rule__StorageMoveSlot__PositionAssignment_4");
			builder.put(grammarAccess.getStorageMoveSlotAccess().getDestinationAssignment_6(), "rule__StorageMoveSlot__DestinationAssignment_6");
			builder.put(grammarAccess.getStorageMarkSlotAccess().getDeviceAssignment_0(), "rule__StorageMarkSlot__DeviceAssignment_0");
			builder.put(grammarAccess.getStorageMarkSlotAccess().getPositionAssignment_4(), "rule__StorageMarkSlot__PositionAssignment_4");
			builder.put(grammarAccess.getStorageMarkSlotAccess().getComparison_variableAssignment_6_0(), "rule__StorageMarkSlot__Comparison_variableAssignment_6_0");
			builder.put(grammarAccess.getStorageMarkSlotAccess().getComparison_constAssignment_6_1(), "rule__StorageMarkSlot__Comparison_constAssignment_6_1");
			builder.put(grammarAccess.getStorageMarkSlotAccess().getComparison_colorAssignment_6_2(), "rule__StorageMarkSlot__Comparison_colorAssignment_6_2");
			builder.put(grammarAccess.getStorageMarkSlotAccess().getComparison_intAssignment_6_3(), "rule__StorageMarkSlot__Comparison_intAssignment_6_3");
			builder.put(grammarAccess.getStorageMarkSlotAccess().getQuantityAssignment_7_1(), "rule__StorageMarkSlot__QuantityAssignment_7_1");
			builder.put(grammarAccess.getStorageMarkSlotAccess().getMeasureAssignment_7_2(), "rule__StorageMarkSlot__MeasureAssignment_7_2");
			builder.put(grammarAccess.getCameraScanAccess().getDeviceAssignment_0(), "rule__CameraScan__DeviceAssignment_0");
			builder.put(grammarAccess.getCameraScanAccess().getVariableAssignment_3(), "rule__CameraScan__VariableAssignment_3");
			builder.put(grammarAccess.getLoopVariableAccess().getNameAssignment_1(), "rule__LoopVariable__NameAssignment_1");
			builder.put(grammarAccess.getGloablVariableAccess().getNameAssignment_1(), "rule__GloablVariable__NameAssignment_1");
			builder.put(grammarAccess.getCranePickupAccess().getDeviceAssignment_0(), "rule__CranePickup__DeviceAssignment_0");
			builder.put(grammarAccess.getCranePickupAccess().getLocationAssignment_4(), "rule__CranePickup__LocationAssignment_4");
			builder.put(grammarAccess.getCraneDropAccess().getDeviceAssignment_0(), "rule__CraneDrop__DeviceAssignment_0");
			builder.put(grammarAccess.getCraneDropAccess().getLocationAssignment_4(), "rule__CraneDrop__LocationAssignment_4");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private FactoryLogicLangGrammarAccess grammarAccess;

	@Override
	protected InternalFactoryLogicLangParser createParser() {
		InternalFactoryLogicLangParser result = new InternalFactoryLogicLangParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected TokenSource createLexer(CharStream stream) {
		return new FactoryLogicLangTokenSource(super.createLexer(stream));
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public FactoryLogicLangGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(FactoryLogicLangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
