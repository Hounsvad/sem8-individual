const int numberOfDiscSlots = 4;
typedef int[0,numberOfDiscSlots-1] id_t;

//Zones: 
int zones_intake = 1;
int zones_crane = 2;
int zones_camera = 3;

chan discGoto[numberOfDiscSlots];
chan AddItemCmd, RemoveItemCmd;
chan AddItem[numberOfDiscSlots], RemoveItem[numberOfDiscSlots];
chan getFreeSlot;
chan foundEmptySlot;
chan getColour;
chan gottenColour;
chan ToggleMagnet;
chan LowerCrane, RaiseCrane;
chan craneGotoIntake, craneGotoRed, craneGotoBlue, craneGotoGreen;
chan setColour[numberOfDiscSlots][4];
bool occupiedSlots[numberOfDiscSlots];
chan setFinished[numberOfDiscSlots];
chan getFinishedSlotChan;
chan foundFinishedSlot;
bool finishedSlots[numberOfDiscSlots];
chan getColourSlot[numberOfDiscSlots];
chan gottenColourSlot;

int emptySlot = -1;
int finishedSlot = -1;

/**
1: Red
2: Green
3: Blue
*/
int colour = 0;
int colourSlot = 0;

clock GlobalTimer;

/**
1: Tried to remove item from empty disc slot
2: Tried to add item to full slot
4:
8:
*/
int error;

process MasterController() {






clock timer;
state
    Idle,
    getEmptySlot,
    slotEmpty,
    gotoIntake,
    fillSlot,
    gotoCamera,
    scanItem,
    itemColour,
    setItemColour,
    markSlotFinishedIn10Seconds,
    markSlotFinishedIn20Seconds,
    markSlotFinishedIn30Seconds,
    SetFinsihedRed,
    setFinishedGreen,
    setFinishedBlue,
    getFinishedSlot,
    slotFinished,
    gotoCrane,
    gotoIntake_crane,
    craneLower,
    toggleMagnet_crane,
    getColourOfSlot,
    thingIsRed,
    thingIsGreen,
    thingIsBlue,
    gotoRed_crane,
    gotoGreen_crane,
    gotoBlue_crane,
    craneLowerBlue,
    craneLowerGreen,
    craneLowerRed,
    toggleMagnetBlue,
    toggleMagnetGreen,
    toggleMagnetRed,
    EndIf,
    markEmpty,
    IdleTime1,
    IdleTime2,
    IdleTime3;
commit
    getEmptySlot,
    scanItem,
    getFinishedSlot,
    getColourOfSlot;
init
    Idle;
trans
    IdleTime3 -> markSlotFinishedIn30Seconds { },
    markSlotFinishedIn30Seconds -> IdleTime3 { },
    IdleTime2 -> markSlotFinishedIn20Seconds { },
    markSlotFinishedIn20Seconds -> IdleTime2 { },
    IdleTime1 -> markSlotFinishedIn10Seconds { },
    markSlotFinishedIn10Seconds -> IdleTime1 { },
    getEmptySlot -> Idle { guard GlobalTimer > 2; },
    getFinishedSlot -> Idle { guard GlobalTimer > 2; },
    markEmpty -> Idle { },
    EndIf -> markEmpty { sync RemoveItem[finishedSlot]!; },
    toggleMagnetRed -> EndIf { },
    toggleMagnetGreen -> EndIf { },
    toggleMagnetBlue -> EndIf { },
    craneLowerRed -> toggleMagnetRed { sync ToggleMagnet!; },
    craneLowerGreen -> toggleMagnetGreen { sync ToggleMagnet!; },
    craneLowerBlue -> toggleMagnetBlue { sync ToggleMagnet!; },
    gotoRed_crane -> craneLowerRed { sync LowerCrane!; },
    gotoGreen_crane -> craneLowerGreen { sync LowerCrane!; },
    gotoBlue_crane -> craneLowerBlue { sync LowerCrane!; },
    thingIsBlue -> gotoBlue_crane { sync craneGotoBlue!; },
    thingIsGreen -> gotoGreen_crane { sync craneGotoGreen!; },
    thingIsRed -> gotoRed_crane { sync craneGotoRed!; },
    getColourOfSlot -> thingIsBlue { guard colourSlot == 3; sync gottenColourSlot?; },
    getColourOfSlot -> thingIsGreen { guard colourSlot == 2; sync gottenColourSlot?; },
    getColourOfSlot -> thingIsRed { guard colourSlot == 1; sync gottenColourSlot?; },
    toggleMagnet_crane -> getColourOfSlot { sync getColourSlot[finishedSlot]!; },
    craneLower -> toggleMagnet_crane { sync ToggleMagnet!; },
    gotoIntake_crane -> craneLower { sync LowerCrane!; },
    gotoCrane -> gotoIntake_crane { sync craneGotoIntake!; },
    slotFinished -> gotoCrane { sync discGoto[(zones_crane + finishedSlot) % numberOfDiscSlots]!; },
    getFinishedSlot -> slotFinished { sync foundFinishedSlot?; },
    Idle -> getFinishedSlot { sync getFinishedSlotChan!; assign GlobalTimer = 0; },
    setFinishedBlue -> Idle { },
    setFinishedGreen -> Idle { },
    SetFinsihedRed -> Idle { },
    markSlotFinishedIn30Seconds -> setFinishedBlue { guard timer >= 30; sync setFinished[emptySlot]!; },
    markSlotFinishedIn20Seconds -> setFinishedGreen { guard timer >= 20; sync setFinished[emptySlot]!; },
    markSlotFinishedIn10Seconds -> SetFinsihedRed { guard timer >= 10; sync setFinished[emptySlot]!; },
    setItemColour -> markSlotFinishedIn30Seconds { guard colour == 3; assign timer = 0; },
    setItemColour -> markSlotFinishedIn20Seconds { guard colour == 2; assign timer = 0; },
    setItemColour -> markSlotFinishedIn10Seconds { guard colour == 1; assign timer = 0; },
    itemColour -> setItemColour { sync setColour[emptySlot][colour]!; },
    getEmptySlot -> slotEmpty { sync foundEmptySlot?; },
    slotEmpty -> gotoIntake { sync discGoto[(zones_intake + emptySlot) % numberOfDiscSlots]!; },
    gotoIntake -> fillSlot { sync AddItem[emptySlot]!; },
    fillSlot -> gotoCamera { },
    gotoCamera -> scanItem { sync getColour!; },
    scanItem -> itemColour { sync gottenColour?; },
    Idle -> getEmptySlot { sync getFreeSlot!; assign GlobalTimer = 0; };
}

process Camera() {

state
    Idle,
    Red,
    Green,
    Blue;
commit
    Red,
    Green,
    Blue;
init
    Idle;
trans
    Blue -> Idle { sync gottenColour!; },
    Idle -> Blue { sync getColour?; assign colour = 3; },
    Green -> Idle { sync gottenColour!; },
    Idle -> Green { sync getColour?; assign colour=2; },
    Red -> Idle { sync gottenColour!; },
    Idle -> Red { sync getColour?; assign colour = 1; };
}

process GetEmptySlot() {

state
    Idle,
    Get4,
    Get1,
    Get2,
    Get3;
commit
    Get4,
    Get1,
    Get2,
    Get3;
init
    Idle;
trans
    Get4 -> Idle { sync foundEmptySlot!; assign emptySlot = 3; },
    Idle -> Get4 { guard !occupiedSlots[3]; sync getFreeSlot?; },
    Get3 -> Idle { sync foundEmptySlot!; assign emptySlot = 2; },
    Idle -> Get3 { guard !occupiedSlots[2]; sync getFreeSlot?; },
    Get2 -> Idle { sync foundEmptySlot!; assign emptySlot = 1; },
    Idle -> Get2 { guard !occupiedSlots[1]; sync getFreeSlot?; },
    Get1 -> Idle { sync foundEmptySlot!; assign emptySlot = 0; },
    Idle -> Get1 { guard !occupiedSlots[0]; sync getFreeSlot?; };
}

process GetFinishedSlot() {

state
    Idle,
    Get4,
    Get1,
    Get2,
    Get3;
commit
    Get4,
    Get1,
    Get2,
    Get3;
init
    Idle;
trans
    Get4 -> Idle { sync foundFinishedSlot!; assign finishedSlot = 3; },
    Idle -> Get4 { guard !finishedSlots[3]; sync getFinishedSlotChan?; },
    Get3 -> Idle { sync foundFinishedSlot!; assign finishedSlot = 2; },
    Idle -> Get3 { guard !finishedSlots[2]; sync getFinishedSlotChan?; },
    Get2 -> Idle { sync foundFinishedSlot!; assign finishedSlot = 1; },
    Idle -> Get2 { guard !finishedSlots[1]; sync getFinishedSlotChan?; },
    Get1 -> Idle { sync foundFinishedSlot!; assign finishedSlot = 0; },
    Idle -> Get1 { guard !finishedSlots[0]; sync getFinishedSlotChan?; };
}

process Disc() {

state
    Position1,
    Position2,
    Position3,
    Position4,
    AddItem1Req,
    RemoveItem1Req,
    AddItem2Req,
    RemoveItem2Req,
    AddItem3Req,
    RemoveItem3Req,
    AddItem4Req,
    RemoveItem4Req;
init
    Position1;
trans
    Position4 -> Position2 { sync discGoto[1]?; },
    Position2 -> Position4 { sync discGoto[3]?; },
    Position1 -> Position3 { sync discGoto[2]?; },
    Position3 -> Position1 { sync discGoto[0]?; },
    Position4 -> Position3 { sync discGoto[2]?; },
    Position1 -> Position4 { sync discGoto[3]?; },
    Position2 -> Position1 { sync discGoto[0]?; },
    Position3 -> Position2 { sync discGoto[1]?; },
    Position1 -> Position2 { sync discGoto[1]?; },
    Position4 -> Position1 { sync discGoto[0]?; },
    Position3 -> Position4 { sync discGoto[3]?; },
    Position2 -> Position3 { sync discGoto[2]?; },
    Position1 -> AddItem1Req { sync AddItemCmd?; },
    Position1 -> RemoveItem1Req { sync RemoveItemCmd?; },
    Position2 -> AddItem2Req { sync AddItemCmd?; },
    Position2 -> RemoveItem2Req { sync RemoveItemCmd?; },
    Position3 -> AddItem3Req { sync AddItemCmd?; },
    Position3 -> RemoveItem3Req { sync RemoveItemCmd?; },
    Position4 -> AddItem4Req { sync AddItemCmd?; },
    Position4 -> RemoveItem4Req { sync RemoveItemCmd?; },
    AddItem1Req -> Position1 { sync AddItem[0]!; },
    RemoveItem1Req -> Position1 { sync RemoveItem[0]!; },
    AddItem2Req -> Position2 { sync AddItem[1]!; },
    RemoveItem2Req -> Position2 { sync RemoveItem[1]!; },
    AddItem3Req -> Position3 { sync AddItem[2]!; },
    RemoveItem3Req -> Position3 { sync RemoveItem[2]!; },
    AddItem4Req -> Position4 { sync AddItem[3]!; },
    RemoveItem4Req -> Position4 { sync RemoveItem[3]!; };
}

process DiscSlot(const id_t id) {

state
    SlotEmpty,
    SlotFull,
    SlotFullRed,
    GetColourRed,
    SlotFullGreen,
    GetColourGreen,
    SlotFullBlue,
    GetColourBlue,
    ErrorAddItemToFull,
    ErrorRemoveItemFromEmpty;
commit
    GetColourRed,
    GetColourGreen,
    GetColourBlue;
init
    SlotEmpty;
trans
    SlotEmpty -> SlotFull { sync AddItem[id]?; assign occupiedSlots[id] = true; },
    SlotFull -> SlotFullRed { sync setColour[id][1]?; },
    SlotFullRed -> GetColourRed { sync getColourSlot[id]?; },
    GetColourRed -> SlotFullRed { sync gottenColourSlot!; },
    SlotFull -> SlotFullGreen { sync setColour[id][2]?; },
    SlotFull -> SlotFullBlue { sync setColour[id][3]?; },
    SlotFull -> SlotEmpty { sync RemoveItem[id]?; assign occupiedSlots[id] = false; },
    SlotFullRed -> SlotEmpty { sync RemoveItem[id]?; assign occupiedSlots[id] = false; },
    SlotFullGreen -> SlotEmpty { sync RemoveItem[id]?; assign occupiedSlots[id] = false; },
    SlotFullBlue -> SlotEmpty { sync RemoveItem[id]?; assign occupiedSlots[id] = false; },
    SlotEmpty -> ErrorRemoveItemFromEmpty { sync RemoveItem[id]?; assign error += 1; },
    SlotFull -> ErrorAddItemToFull { sync AddItem[id]?; assign error += 2; },
    SlotFullRed -> ErrorAddItemToFull { sync AddItem[id]?; assign error += 2; },
    SlotFullGreen -> ErrorAddItemToFull { sync AddItem[id]?; assign error += 2; },
    SlotFullBlue -> ErrorAddItemToFull { sync AddItem[id]?; assign error += 2; };
}

process SlotVariable_finished(const id_t id) {

state
    IsFinished,
    IsNotFinished;
init
    IsNotFinished;
trans
    IsNotFinished -> IsFinished { sync setFinished[id]?; },
    IsFinished -> IsNotFinished { sync setFinished[id]?; };
}

process Crane() {













// Place local declarations here.
bool magnetPower =  false;
state
    Intake,
    Red,
    Green,
    Blue,
    LoweredAtRed,
    LoweredAtGreen,
    LoweredAtBlue,
    LoweredAtIntake;
init
    Intake;
trans
    LoweredAtIntake -> Intake { sync RaiseCrane?; },
    Intake -> LoweredAtIntake { sync LowerCrane?; },
    LoweredAtBlue -> Blue { sync RaiseCrane?; },
    Blue -> LoweredAtBlue { sync LowerCrane?; },
    LoweredAtGreen -> Green { sync RaiseCrane?; },
    Green -> LoweredAtGreen { sync LowerCrane?; },
    LoweredAtRed -> Red { sync RaiseCrane?; },
    Red -> LoweredAtRed { sync LowerCrane?; },
    Green -> Intake { sync craneGotoIntake?; },
    Intake -> Green { sync craneGotoGreen?; },
    Red -> Intake { sync craneGotoIntake?; },
    Green -> Red { sync craneGotoRed?; },
    Blue -> Green { sync craneGotoGreen?; },
    Intake -> Blue { sync craneGotoBlue?; },
    Blue -> Intake { sync craneGotoIntake?; },
    Green -> Blue { sync craneGotoBlue?; },
    Red -> Green { sync craneGotoGreen?; },
    Intake -> Red { sync craneGotoRed?; },
    Red -> Blue { sync craneGotoBlue?; },
    Blue -> Red { sync craneGotoRed?; };
}

process CraneMagnet() {

state
    MagnetOff,
    MagnetOn;
init
    MagnetOff;
trans
    MagnetOn -> MagnetOff { sync ToggleMagnet?; },
    MagnetOff -> MagnetOn { sync ToggleMagnet?; };
}













// Place template instantiations here.
// List one or more processes to be composed into a system.
system MasterController, Disc, Crane, DiscSlot, GetEmptySlot, CraneMagnet, Camera;