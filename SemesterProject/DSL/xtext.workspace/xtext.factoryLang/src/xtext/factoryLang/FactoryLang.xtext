grammar xtext.factoryLang.FactoryLang with org.eclipse.xtext.common.Terminals

generate factoryLang "http://www.factoryLang.xtext/FactoryLang"

Model:
	declarations+=Declaration+ statements+=Statement*;

// ----- CONFIGURATION ----- //
Declaration:
	'create' device=Device;

Device returns Reference:
	Crane | Disk | Camera;

Crane returns Device:
	{Crane} 'crane' 'named' name=STRING BEGIN parameters+=CraneParameter+ END;

CraneParameter returns Parameter:
	{CraneParameter} 'with' 'position' 'at' degree=INT 'named' name=STRING;

Disk returns Device:
	{Disk} 'disk' 'named' name=STRING BEGIN parameters+=DiskParameter+ END;

DiskParameter returns Parameter:
	DiskPositionParameter | DiskSlotParameter;

DiskPositionParameter returns DiskParameter:
	{DiskPositionParameter} 'with' 'position' 'at' 'slot' slot=INT 'named' name=STRING;

DiskSlotParameter returns DiskParameter:
	{DiskSlotParameter} 'with' slots=INT 'slots';

Camera returns Device:
	{Camera} 'camera' 'named' name=STRING BEGIN parameters+=CameraParameter+ END;

CameraParameter returns Parameter:
	{CameraParameter} 'with' 'scannable' 'color' color=COLOR;

// ----- LOGIC ----- //
Statement:
	Conditional; // | Loop | Operation;

Conditional:
	DeviceConditional | VariableConditional | NumberConditional;

DeviceConditional returns Conditional:
	{DeviceConditional} 'if' source=[Device] 'is' operator=BOOLEAN_OPERATOR target=ConditionalTarget 'then' BEGIN
	statements+=Statement+ END;

CraneConditional returns Conditional:
	{DeviceConditional} 'if' source=[Crane] 'is' operator=BOOLEAN_OPERATOR target=ConditionalTarget 'then' BEGIN
	statements+=Statement+ END;

VariableConditional returns Conditional:
	{VariableConditional} 'if' source=[Variable] 'is' operator=BOOLEAN_OPERATOR target=ConditionalTarget 'then' BEGIN
	statements+=Statement+ END;

NumberConditional returns Conditional:
	{NumberConditional} 'if' source=[Number] 'is' operator=BOOLEAN_OPERATOR target=ConditionalTarget 'then' BEGIN
	statements+=Statement+ END;

ConditionalTarget:
	disk_state=DISK_STATES | color=COLOR | value=INT;
	
Variable returns Reference:
	{Variable} name=ID;

Number:
	value=INT;

//Loop returns Statement:
//	name=ID;
//
//Operation returns Statement:
//	CraneOperation | DiskOperation | CameraOperation;
//
//CraneOperation returns Operation:
//	name=ID;
//
//DiskOperation returns Operation:
//	name=ID;
//
//CameraOperation returns Operation:
//	name=ID;
//


// ----- ENUMS ----- //
enum COLOR:
	RED='red' | GREEN='green' | BLUE='blue';

enum BOOLEAN_OPERATOR:
	NOT='not' | LESS_THAN='less than' | GREATER_THAN='greater than' | EQUAL_TO='equal to';

enum DISK_STATES:
	FREE='free' | IN_PROGRESS='in progress' | COMPLETE='complete';

// ----- TERMINALS ----- //
terminal BEGIN:
	'synthetic:BEGIN';

terminal END:
	'synthetic:END';
